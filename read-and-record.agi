#! /usr/bin/env python
# -*- coding: utf-8 -*-
# vim: set et sw=4 fenc=utf-8:
#
# Copyright 2016 INVITE Communications Co., Ltd. All Rights Reserved.
# Copyright 2016 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""AGI script that renders speech to text using Google Cloud Speech API
 using the REST API."""

# [START import_libraries]
import base64
import json

import os
from asterisk.agi import *
import logging
import tempfile
#import threading

import sys
reload(sys)
sys.setdefaultencoding("utf-8")

from googleapiclient import discovery
import httplib2
from oauth2client.client import GoogleCredentials
# [END import_libraries]

# [START authenticating]
DISCOVERY_URL = ('https://{api}.googleapis.com/$discovery/rest?'
                 'version={apiVersion}')

# Application default credentials provided by env variable
# GOOGLE_APPLICATION_CREDENTIALS

# ** Permissions of file are IMPORTANT **
os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = '/home/google_voice_api.json'

def get_speech_service():
    credentials = GoogleCredentials.get_application_default().create_scoped(
        ['https://www.googleapis.com/auth/cloud-platform'])
    http = httplib2.Http()
    credentials.authorize(http)

    return discovery.build(
        'speech', 'v1beta1', http=http, discoveryServiceUrl=DISCOVERY_URL)
# [END authenticating]


def main(speech_file):
    """Transcribe the given audio file.

    Args:
        speech_file: the name of the audio file.
    """
    # [START construct_request]
    with open(speech_file, 'rb') as speech:
        # Base64 encode the binary audio file for inclusion in the JSON
        # request.
        speech_content = base64.b64encode(speech.read())
	
    agi.verbose('PROCESSING')
	#threading.Thread(target=moh_start).start()
	#agi.execute('EXEC', 'MusicOnHold')
	#agi.stream_file('/var/lib/asterisk/sounds/en/pls-hold-process-tx')
	#agi.stream_file('/var/lib/asterisk/moh/macroform-cold_day')
    service = get_speech_service()
    service_request = service.speech().syncrecognize(
        body={
            'config': {
                # There are a bunch of config options you can specify. See
                # https://goo.gl/EPjAup for the full list.
                'encoding': 'MULAW',  # raw 16-bit signed LE samples
                'sampleRate': 8000,  # 16 khz
                # See https://goo.gl/DPeVFW for a list of supported languages.
                'languageCode': 'ja-JP',  # a BCP-47 language tag 
                # Working with: en-US/ja-JP
            },
            'audio': {
                'content': speech_content.decode('UTF-8')
                }
            })
    # [END construct_request]
    # [START send_request]
    response = service_request.execute()
    # json.dumps(ensure_ascii=False) to disable unicode \uXXXX format
    #print(json.dumps(response, ensure_ascii=False))
    #return json.dumps(response, ensure_ascii=False)
    #threading.Thread(target=moh_stop).start()
    #agi.execute('EXEC', 'StopMusicOnHold')
    return response
    # [END send_request]
    
def moh_start():
    agi.stream_file('/var/lib/asterisk/sounds/en/one-moment-please')
    #agi.execute('EXEC', 'MusicOnHold')

def moh_stop():
    agi.execute('EXEC', 'StopMusicOnHold')

# [START run_application]
    
temp = tempfile.NamedTemporaryFile()
temp.close()

agi = AGI()
agi.answer()
agi.verbose("python agi started")
agi.verbose(agi.env['agi_arg_1'])
agi.verbose(agi.env['agi_arg_2'])

#pls-enter-conf-password

filename = temp.name



#agi.exec_command('AGI', 'asterisk-googletts/googletts.agi', 'say or enter 8-digits', 'en')
agi.exec_command('Monitor', 'ulaw', (filename), 'o')
res = agi.get_data('beep', 20000, 8)
agi.exec_command('StopMonitor')

#res = '13579'
if res:
    agi.say_digits(res)
if not res:
    agi.stream_file('one-moment-please')
    response_data = main(filename + '-in.ulaw')
    string = response_data['results'][0]['alternatives'][0]['transcript']
    res = string.encode('utf8', 'replace')
    agi.say_digits(res[:8])
	#recording = (filename) + '-in'
    #agi.verbose(recording)
    #agi.stream_file(filename + '-in')
	#agi.get_data((filename) + '-in.ulaw')
    #agi.say_digits('999')
    #agi.control_stream_file((filename) + '-in.ulaw')

#digits = agi.exec_command('Read')

agi.set_variable('RESPONSE', res)



